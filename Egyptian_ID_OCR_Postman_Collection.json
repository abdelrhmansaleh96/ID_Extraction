{
  "info": {
    "name": "Egyptian ID OCR Microservice",
    "description": "Complete API collection for testing the Egyptian ID OCR microservice",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "test_image_url",
      "value": "https://via.placeholder.com/400x300/000000/FFFFFF?text=Test+ID+Card",
      "type": "string"
    },
    {
      "key": "invalid_image_url",
      "value": "https://invalid-url-that-does-not-exist.com/image.jpg",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Info",
      "item": [
        {
          "name": "Service Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            },
            "description": "Get basic service information"
          },
          "response": []
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check service health and uptime"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Image Validation",
      "item": [
        {
          "name": "Validate Valid Image URL",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/validate-image?image_url={{test_image_url}}",
              "host": ["{{base_url}}"],
              "path": ["validate-image"],
              "query": [
                {
                  "key": "image_url",
                  "value": "{{test_image_url}}"
                }
              ]
            },
            "description": "Validate a valid image URL"
          },
          "response": []
        },
        {
          "name": "Validate Invalid Image URL",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/validate-image?image_url={{invalid_image_url}}",
              "host": ["{{base_url}}"],
              "path": ["validate-image"],
              "query": [
                {
                  "key": "image_url",
                  "value": "{{invalid_image_url}}"
                }
              ]
            },
            "description": "Validate an invalid image URL"
          },
          "response": []
        }
      ]
    },
    {
      "name": "ID Extraction",
      "item": [
        {
          "name": "Extract ID - Valid Image",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"image_url\": \"{{test_image_url}}\",\n  \"request_id\": \"test-request-001\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/extract-id",
              "host": ["{{base_url}}"],
              "path": ["extract-id"]
            },
            "description": "Extract ID data from a valid image URL"
          },
          "response": []
        },
        {
          "name": "Extract ID - Invalid URL",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"image_url\": \"{{invalid_image_url}}\",\n  \"request_id\": \"test-request-002\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/extract-id",
              "host": ["{{base_url}}"],
              "path": ["extract-id"]
            },
            "description": "Test error handling with invalid URL"
          },
          "response": []
        },
        {
          "name": "Extract ID - Malformed Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invalid_field\": \"test\",\n  \"missing_required_field\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/extract-id",
              "host": ["{{base_url}}"],
              "path": ["extract-id"]
            },
            "description": "Test validation with malformed request"
          },
          "response": []
        },
        {
          "name": "Extract ID - Real Image URLs",
          "item": [
            {
              "name": "Extract ID - Sample Image 1",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"image_url\": \"https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=400&h=300&fit=crop\",\n  \"request_id\": \"test-unsplash-001\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/extract-id",
                  "host": ["{{base_url}}"],
                  "path": ["extract-id"]
                },
                "description": "Test with a real image from Unsplash"
              },
              "response": []
            },
            {
              "name": "Extract ID - Sample Image 2",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"image_url\": \"https://picsum.photos/400/300\",\n  \"request_id\": \"test-picsum-001\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/extract-id",
                  "host": ["{{base_url}}"],
                  "path": ["extract-id"]
                },
                "description": "Test with a random image from Picsum"
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Concurrent Requests Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"image_url\": \"{{test_image_url}}\",\n  \"request_id\": \"perf-test-{{$timestamp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/extract-id",
              "host": ["{{base_url}}"],
              "path": ["extract-id"]
            },
            "description": "Performance test request (run multiple times)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Empty Request Body",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/extract-id",
              "host": ["{{base_url}}"],
              "path": ["extract-id"]
            },
            "description": "Test with empty request body"
          },
          "response": []
        },
        {
          "name": "Invalid JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"image_url\": \"https://example.com/image.jpg\",\n  \"request_id\": \"test-001\",\n  \"invalid_json\": true,\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/extract-id",
              "host": ["{{base_url}}"],
              "path": ["extract-id"]
            },
            "description": "Test with invalid JSON syntax"
          },
          "response": []
        },
        {
          "name": "Non-Image URL",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"image_url\": \"https://www.google.com\",\n  \"request_id\": \"test-html-001\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/extract-id",
              "host": ["{{base_url}}"],
              "path": ["extract-id"]
            },
            "description": "Test with non-image URL (HTML page)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for unique request IDs",
          "pm.globals.set('timestamp', Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Basic response validation",
          "pm.test('Response time is less than 10000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(10000);",
          "});",
          "",
          "pm.test('Response has proper headers', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Test specific to extract-id endpoint",
          "if (pm.request.url.path.includes('extract-id')) {",
          "    pm.test('Response contains success field', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('success');",
          "    });",
          "    ",
          "    pm.test('Response contains request_id', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('request_id');",
          "    });",
          "    ",
          "    pm.test('Response contains timestamp', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('timestamp');",
          "    });",
          "}",
          "",
          "// Test specific to health endpoint",
          "if (pm.request.url.path.includes('health')) {",
          "    pm.test('Health check returns healthy status', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData.status).to.eql('healthy');",
          "    });",
          "}"
        ]
      }
    }
  ]
}
